pipeline {
    agent any

    environment {
        TESTING_ENVIRONMENT = "testing_environment"
        PRODUCTION_ENVIRONMENT = "Nishitha"
    }

    stages {
        stage('Build') {
            steps {
                script {
                    performStep('Executing Maven build process')
                }
            }
        }

        stage('Unit and Integration Tests') {
            steps {
                script {
                    performStep('Executing JUnit tests')
                    performStep('Executing Selenium integration tests')
                }
            }
        }

        stage('Code Analysis') {
            steps {
                script {
                    performStep('Performing static code analysis using Jenkins Plugins')
                }
            }
        }

        stage('Security Scan') {
            steps {
                script {
                    performStep('Conducting security scan with SonarQube')
                }
            }
        }

        stage('Deploy to Staging') {
            steps {
                script {
                    performStep('Initiating deployment to staging server')
                }
            }
        }

        stage('Integration Tests on Staging') {
            steps {
                script {
                    performStep('Conducting integration tests in staging environment')
                }
            }
        }

        stage('Deploy to Production') {
            steps {
                script {
                    performStep('Initiating deployment to production server')
                }
            }
        }
    }
}

def performStep(String action) {
    echo action
    try {
        // simulate step execution logic, replace with real commands
        // for example: sh 'mvn clean install' for Maven build
        success = true
    } catch (Exception e) {
        success = false
    }
    if (success) {
        sendEmail(action, 'Successful')
    } else {
        sendEmail(action, 'Failed')
    }
}

def sendEmail(String action, String result) {
    mail body: "${action}: ${result}",
         subject: "Pipeline Notification: ${action} - ${result}",
         to: "nishithadayanand@gmail.com"
}
